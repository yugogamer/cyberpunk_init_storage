//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "groupes_access")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id_groupe: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id_user: i32,
    pub admin: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::accounts::Entity",
        from = "Column::IdUser",
        to = "super::accounts::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Accounts,
    #[sea_orm(
        belongs_to = "super::groupes::Entity",
        from = "Column::IdGroupe",
        to = "super::groupes::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Groupes,
}

impl Related<super::accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Accounts.def()
    }
}

impl Related<super::groupes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Groupes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
